import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  User, 
  Mail, 
  Phone, 
  MapPin, 
  Calendar, 
  Bell, 
  Shield, 
  Heart,
  Edit,
  Save,
  X
} from 'lucide-react';
import { authService } from '@/data/auth.js';
import { bookingService } from '@/data/appointments.js';
import { useToast } from '@/hooks/use-toast';
import { format } from 'date-fns';\n\nconst ProfilePage = () => {\n  const [user, setUser] = useState(null);\n  const [editing, setEditing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [userAppointments, setUserAppointments] = useState([]);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    dateOfBirth: '',\n    address: {\n      street: '',\n      city: '',\n      state: '',\n      zipCode: '',\n      country: ''\n    },\n    emergencyContact: {\n      name: '',\n      phone: '',\n      relationship: ''\n    },\n    medicalHistory: [],\n    allergies: [],\n    constitution: '',\n    goals: [],\n    preferences: {\n      notifications: {\n        email: true,\n        sms: true,\n        push: true\n      },\n      language: 'English',\n      theme: 'light',\n      timezone: 'America/New_York'\n    }\n  });\n\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const currentUser = authService.getCurrentUser();\n    if (currentUser) {\n      setUser(currentUser);\n      setFormData({\n        name: currentUser.name || '',\n        email: currentUser.email || '',\n        phone: currentUser.phone || '',\n        dateOfBirth: currentUser.dateOfBirth || '',\n        address: currentUser.address || {\n          street: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: 'USA'\n        },\n        emergencyContact: currentUser.emergencyContact || {\n          name: '',\n          phone: '',\n          relationship: ''\n        },\n        medicalHistory: currentUser.medicalHistory || [],\n        allergies: currentUser.allergies || [],\n        constitution: currentUser.constitution || '',\n        goals: currentUser.goals || [],\n        preferences: currentUser.preferences || {\n          notifications: {\n            email: true,\n            sms: true,\n            push: true\n          },\n          language: 'English',\n          theme: 'light',\n          timezone: 'America/New_York'\n        }\n      });\n\n      // Load user appointments\n      const appointments = bookingService.getUserAppointments(currentUser.id);\n      setUserAppointments(appointments);\n    }\n  }, []);\n\n  const handleSave = async () => {\n    setLoading(true);\n    try {\n      const result = await authService.updateProfile(formData);\n      if (result.success) {\n        setUser(result.user);\n        setEditing(false);\n        toast({\n          title: \"Profile Updated\",\n          description: \"Your profile has been successfully updated.\"\n        });\n      } else {\n        toast({\n          title: \"Update Failed\",\n          description: result.error || \"Unable to update profile.\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    // Reset form data to original user data\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        dateOfBirth: user.dateOfBirth || '',\n        address: user.address || {\n          street: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: 'USA'\n        },\n        emergencyContact: user.emergencyContact || {\n          name: '',\n          phone: '',\n          relationship: ''\n        },\n        medicalHistory: user.medicalHistory || [],\n        allergies: user.allergies || [],\n        constitution: user.constitution || '',\n        goals: user.goals || [],\n        preferences: user.preferences || {\n          notifications: {\n            email: true,\n            sms: true,\n            push: true\n          },\n          language: 'English',\n          theme: 'light',\n          timezone: 'America/New_York'\n        }\n      });\n    }\n    setEditing(false);\n  };\n\n  const addArrayItem = (field, value) => {\n    if (value.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        [field]: [...prev[field], value.trim()]\n      }));\n    }\n  };\n\n  const removeArrayItem = (field, index) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: prev[field].filter((_, i) => i !== index)\n    }));\n  };\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p>Please log in to view your profile.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">My Profile</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your personal information and preferences\n          </p>\n        </div>\n        \n        {!editing ? (\n          <Button onClick={() => setEditing(true)}>\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Edit Profile\n          </Button>\n        ) : (\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={handleCancel}>\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n            <Button onClick={handleSave} disabled={loading}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              {loading ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <Tabs defaultValue=\"personal\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"personal\">Personal Info</TabsTrigger>\n          <TabsTrigger value=\"medical\">Medical History</TabsTrigger>\n          <TabsTrigger value=\"appointments\">My Appointments</TabsTrigger>\n          <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"personal\" className=\"space-y-4\">\n          {/* Profile Overview */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center gap-4\">\n                <Avatar className=\"w-20 h-20\">\n                  <AvatarImage src={user.avatar} alt={user.name} />\n                  <AvatarFallback className=\"text-xl\">\n                    {user.name?.split(' ').map(n => n[0]).join('')}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-2xl\">{user.name}</CardTitle>\n                  <CardDescription className=\"text-lg\">{user.email}</CardDescription>\n                  <div className=\"flex gap-2 mt-2\">\n                    <Badge variant=\"secondary\">{user.role}</Badge>\n                    {user.constitution && (\n                      <Badge variant=\"outline\">{user.constitution} Constitution</Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n\n          {/* Basic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Basic Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Full Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    disabled={!editing}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    disabled={!editing}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                    disabled={!editing}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                  <Input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    value={formData.dateOfBirth}\n                    onChange={(e) => setFormData(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                    disabled={!editing}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"constitution\">Ayurvedic Constitution</Label>\n                <Select \n                  value={formData.constitution} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, constitution: value }))}\n                  disabled={!editing}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select your constitution\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Vata\">Vata</SelectItem>\n                    <SelectItem value=\"Pitta\">Pitta</SelectItem>\n                    <SelectItem value=\"Kapha\">Kapha</SelectItem>\n                    <SelectItem value=\"Vata-Pitta\">Vata-Pitta</SelectItem>\n                    <SelectItem value=\"Pitta-Kapha\">Pitta-Kapha</SelectItem>\n                    <SelectItem value=\"Vata-Kapha\">Vata-Kapha</SelectItem>\n                    <SelectItem value=\"Tridoshic\">Tridoshic</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Address */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Address</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"street\">Street Address</Label>\n                <Input\n                  id=\"street\"\n                  value={formData.address.street}\n                  onChange={(e) => setFormData(prev => ({ \n                    ...prev, \n                    address: { ...prev.address, street: e.target.value }\n                  }))}\n                  disabled={!editing}\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"city\">City</Label>\n                  <Input\n                    id=\"city\"\n                    value={formData.address.city}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      address: { ...prev.address, city: e.target.value }\n                    }))}\n                    disabled={!editing}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"state\">State</Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.address.state}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      address: { ...prev.address, state: e.target.value }\n                    }))}\n                    disabled={!editing}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                  <Input\n                    id=\"zipCode\"\n                    value={formData.address.zipCode}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      address: { ...prev.address, zipCode: e.target.value }\n                    }))}\n                    disabled={!editing}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Emergency Contact */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Emergency Contact</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"emergencyName\">Contact Name</Label>\n                  <Input\n                    id=\"emergencyName\"\n                    value={formData.emergencyContact.name}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      emergencyContact: { ...prev.emergencyContact, name: e.target.value }\n                    }))}\n                    disabled={!editing}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"emergencyPhone\">Contact Phone</Label>\n                  <Input\n                    id=\"emergencyPhone\"\n                    value={formData.emergencyContact.phone}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      emergencyContact: { ...prev.emergencyContact, phone: e.target.value }\n                    }))}\n                    disabled={!editing}\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"relationship\">Relationship</Label>\n                <Select \n                  value={formData.emergencyContact.relationship} \n                  onValueChange={(value) => setFormData(prev => ({ \n                    ...prev, \n                    emergencyContact: { ...prev.emergencyContact, relationship: value }\n                  }))}\n                  disabled={!editing}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select relationship\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Spouse\">Spouse</SelectItem>\n                    <SelectItem value=\"Parent\">Parent</SelectItem>\n                    <SelectItem value=\"Child\">Child</SelectItem>\n                    <SelectItem value=\"Sibling\">Sibling</SelectItem>\n                    <SelectItem value=\"Friend\">Friend</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"medical\" className=\"space-y-4\">\n          {/* Medical History */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Medical History</CardTitle>\n              <CardDescription>\n                Please list any relevant medical conditions or treatments\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex flex-wrap gap-2\">\n                {formData.medicalHistory.map((condition, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-sm\">\n                    {condition}\n                    {editing && (\n                      <button\n                        onClick={() => removeArrayItem('medicalHistory', index)}\n                        className=\"ml-2 text-red-500 hover:text-red-700\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              \n              {editing && (\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Add medical condition\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addArrayItem('medicalHistory', e.target.value);\n                        e.target.value = '';\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => {\n                      const input = e.target.parentElement.querySelector('input');\n                      addArrayItem('medicalHistory', input.value);\n                      input.value = '';\n                    }}\n                  >\n                    Add\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Allergies */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Allergies</CardTitle>\n              <CardDescription>\n                List any known allergies to medications, foods, or other substances\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex flex-wrap gap-2\">\n                {formData.allergies.map((allergy, index) => (\n                  <Badge key={index} variant=\"destructive\" className=\"text-sm\">\n                    {allergy}\n                    {editing && (\n                      <button\n                        onClick={() => removeArrayItem('allergies', index)}\n                        className=\"ml-2 text-white hover:text-gray-200\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              \n              {editing && (\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Add allergy\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addArrayItem('allergies', e.target.value);\n                        e.target.value = '';\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => {\n                      const input = e.target.parentElement.querySelector('input');\n                      addArrayItem('allergies', input.value);\n                      input.value = '';\n                    }}\n                  >\n                    Add\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Health Goals */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Health Goals</CardTitle>\n              <CardDescription>\n                What do you hope to achieve through Ayurvedic treatment?\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex flex-wrap gap-2\">\n                {formData.goals.map((goal, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-sm\">\n                    {goal}\n                    {editing && (\n                      <button\n                        onClick={() => removeArrayItem('goals', index)}\n                        className=\"ml-2 text-red-500 hover:text-red-700\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              \n              {editing && (\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Add health goal\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        addArrayItem('goals', e.target.value);\n                        e.target.value = '';\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => {\n                      const input = e.target.parentElement.querySelector('input');\n                      addArrayItem('goals', input.value);\n                      input.value = '';\n                    }}\n                  >\n                    Add\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"appointments\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>My Appointments</CardTitle>\n              <CardDescription>\n                View and manage your upcoming and past appointments\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {userAppointments.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {userAppointments.map(appointment => (\n                    <div key={appointment.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h4 className=\"font-medium\">{appointment.serviceName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            with {appointment.therapistName}\n                          </p>\n                          <div className=\"flex items-center gap-4 mt-2 text-sm\">\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"w-4 h-4\" />\n                              {format(new Date(appointment.date), 'PPP')}\n                            </span>\n                            <span>{appointment.time}</span>\n                            <span>${appointment.price}</span>\n                          </div>\n                        </div>\n                        <Badge \n                          variant={\n                            appointment.status === 'completed' ? 'default' :\n                            appointment.status === 'confirmed' ? 'secondary' :\n                            appointment.status === 'pending' ? 'outline' : 'destructive'\n                          }\n                        >\n                          {appointment.status}\n                        </Badge>\n                      </div>\n                      {appointment.notes && (\n                        <p className=\"text-sm text-muted-foreground mt-2\">\n                          Notes: {appointment.notes}\n                        </p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No appointments found.</p>\n                  <Button className=\"mt-4\">Book Your First Appointment</Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"preferences\" className=\"space-y-4\">\n          {/* Notification Preferences */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Notification Preferences</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive appointment reminders and updates via email\n                  </p>\n                </div>\n                <Switch\n                  id=\"email-notifications\"\n                  checked={formData.preferences.notifications.email}\n                  onCheckedChange={(checked) => setFormData(prev => ({\n                    ...prev,\n                    preferences: {\n                      ...prev.preferences,\n                      notifications: {\n                        ...prev.preferences.notifications,\n                        email: checked\n                      }\n                    }\n                  }))}\n                  disabled={!editing}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"sms-notifications\">SMS Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive text message reminders and alerts\n                  </p>\n                </div>\n                <Switch\n                  id=\"sms-notifications\"\n                  checked={formData.preferences.notifications.sms}\n                  onCheckedChange={(checked) => setFormData(prev => ({\n                    ...prev,\n                    preferences: {\n                      ...prev.preferences,\n                      notifications: {\n                        ...prev.preferences.notifications,\n                        sms: checked\n                      }\n                    }\n                  }))}\n                  disabled={!editing}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"push-notifications\">Push Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive in-app notifications and alerts\n                  </p>\n                </div>\n                <Switch\n                  id=\"push-notifications\"\n                  checked={formData.preferences.notifications.push}\n                  onCheckedChange={(checked) => setFormData(prev => ({\n                    ...prev,\n                    preferences: {\n                      ...prev.preferences,\n                      notifications: {\n                        ...prev.preferences.notifications,\n                        push: checked\n                      }\n                    }\n                  }))}\n                  disabled={!editing}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* General Preferences */}\n          <Card>\n            <CardHeader>\n              <CardTitle>General Preferences</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"language\">Language</Label>\n                  <Select \n                    value={formData.preferences.language} \n                    onValueChange={(value) => setFormData(prev => ({\n                      ...prev,\n                      preferences: { ...prev.preferences, language: value }\n                    }))}\n                    disabled={!editing}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"English\">English</SelectItem>\n                      <SelectItem value=\"Spanish\">Spanish</SelectItem>\n                      <SelectItem value=\"Hindi\">Hindi</SelectItem>\n                      <SelectItem value=\"French\">French</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"theme\">Theme</Label>\n                  <Select \n                    value={formData.preferences.theme} \n                    onValueChange={(value) => setFormData(prev => ({\n                      ...prev,\n                      preferences: { ...prev.preferences, theme: value }\n                    }))}\n                    disabled={!editing}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"light\">Light</SelectItem>\n                      <SelectItem value=\"dark\">Dark</SelectItem>\n                      <SelectItem value=\"system\">System</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"timezone\">Timezone</Label>\n                <Select \n                  value={formData.preferences.timezone} \n                  onValueChange={(value) => setFormData(prev => ({\n                    ...prev,\n                    preferences: { ...prev.preferences, timezone: value }\n                  }))}\n                  disabled={!editing}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                    <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                    <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                    <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ProfilePage;